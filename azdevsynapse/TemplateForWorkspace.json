{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "azdevsynapse"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"az_isource_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'az_isource_blob'"
		},
		"azdevsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azdevsynapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:azdevsynapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"azdevsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azdevsynapse.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpoola')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PP_copy_multiple_files_Isource_Raw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get_metdata_isource_csv_files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach_source_file_copy_raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_metdata_isource_csv_files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_metdata_isource_csv_files').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy_multiple_files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sales_Project"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "az_isource_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "isource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/az_isource_blob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "isource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "PhoneNumberType",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "EmailPromotion",
						"type": "String"
					},
					{
						"name": "AddressType",
						"type": "String"
					},
					{
						"name": "AddressLine1",
						"type": "String"
					},
					{
						"name": "AddressLine2",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "StateProvinceName",
						"type": "String"
					},
					{
						"name": "PostalCode",
						"type": "String"
					},
					{
						"name": "CountryRegionName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "isource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "PhoneNumberType",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "EmailPromotion",
						"type": "String"
					},
					{
						"name": "AddressType",
						"type": "String"
					},
					{
						"name": "AddressLine1",
						"type": "String"
					},
					{
						"name": "AddressLine2",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "StateProvinceName",
						"type": "String"
					},
					{
						"name": "PostalCode",
						"type": "String"
					},
					{
						"name": "CountryRegionName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw-dev"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet_isource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "az_isource_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"target_file_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().target_file_name",
							"type": "Expression"
						},
						"container": "raw-dev"
					},
					"compressionCodec": "none"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/az_isource_blob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/isource_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "az_isource_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_file_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "isource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "PhoneNumberType",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "EmailPromotion",
						"type": "String"
					},
					{
						"name": "AddressType",
						"type": "String"
					},
					{
						"name": "AddressLine1",
						"type": "String"
					},
					{
						"name": "AddressLine2",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "StateProvinceName",
						"type": "String"
					},
					{
						"name": "PostalCode",
						"type": "String"
					},
					{
						"name": "CountryRegionName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/az_isource_blob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_isource_blob')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('az_isource_blob_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azdevsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('azdevsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azdevsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('azdevsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (\n\t\t\t FIELD_TERMINATOR = ',',\n\t\t\t USE_TYPE_DEFAULT = FALSE\n\t\t\t))\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'confirm_azdevsynapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [confirm_azdevsynapse_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://confirm@azdevsynapse.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE staging.DimDate (\n    DateKey INT,\n    FullDate DATE,\n    Day INT,\n    DayOfWeek INT,\n    DayOfWeekName VARCHAR(20),\n    DayOfYear INT,\n    WeekOfYear INT,\n    Month INT,\n    MonthName VARCHAR(20),\n    Quarter INT,\n    Year INT,\n    IsWeekend BIT,\n    IsHoliday BIT -- Optionally, you can also add a flag for holidays\n\t)\n\tWITH (\n\tLOCATION = 'EXPORT_DateDim.csv',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDelimitedTextFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM staging.DimDate\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Vsqldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT * FROM sys.external_data_sources\n\n\nabfss://confirm@azdevsynapse.dfs.core.windows.net\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Vsqldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [BusinessEntityID]\n,[Title]\n,[FirstName]\n,[MiddleName]\n,[LastName]\n,[Suffix]\n,[JobTitle]\n,[PhoneNumber]\n,[PhoneNumberType]\n,[EmailAddress]\n,[EmailPromotion]\n,[AddressLine1]\n,[AddressLine2]\n,[City]\n,[StateProvinceName]\n,[PostalCode]\n,[CountryRegionName]\n,[TerritoryName]\n,[TerritoryGroup]\n FROM [STAGING].[SalesPerson]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Vsqldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Select_Script_VSQL_Staging')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT count(1)  FROM STAGING.Customer;\nSELECT count(1)  FROM STAGING.Product;\nSELECT count(1)  FROM STAGING.Product_Category;\nSELECT count(1)  FROM STAGING.SalesOrder;\nSELECT count(1)  FROM STAGING.SalesOrderDetail;\nSELECT count(1)  FROM STAGING.SalesPerson;\n\nSELECT COUNT(1) FROM dbo.DimCustomer;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Vsqldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/V_SQL_DDL_Script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'confirm_azdevsynapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [confirm_azdevsynapse_dfs_core_windows_net] \n\tWITH ( \n\t\tLOCATION = 'abfss://confirm@azdevsynapse.dfs.core.windows.net' \n\t)\nGO\n\n\nCREATE EXTERNAL TABLE staging.SalesPerson (\n\t[BusinessEntityID] nvarchar(4000),\n\t[Title] nvarchar(4000),\n\t[FirstName] nvarchar(4000),\n\t[MiddleName] nvarchar(4000),\n\t[LastName] nvarchar(4000),\n\t[Suffix] nvarchar(4000),\n\t[JobTitle] nvarchar(4000),\n\t[PhoneNumber] nvarchar(4000),\n\t[PhoneNumberType] nvarchar(4000),\n\t[EmailAddress] nvarchar(4000),\n\t[EmailPromotion] nvarchar(4000),\n\t[AddressLine1] nvarchar(4000),\n\t[AddressLine2] nvarchar(4000),\n\t[City] nvarchar(4000),\n\t[StateProvinceName] nvarchar(4000),\n\t[PostalCode] nvarchar(4000),\n\t[CountryRegionName] nvarchar(4000),\n\t[TerritoryName] nvarchar(4000),\n\t[TerritoryGroup] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'confirm_Sales_Person.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\n\nCREATE EXTERNAL TABLE Staging.SalesOrderDetail (\n\t[SalesOrderID] nvarchar(4000),\n\t[SalesOrderDetailID] nvarchar(4000),\n\t[CarrierTrackingNumber] nvarchar(4000),\n\t[OrderQty] nvarchar(4000),\n\t[ProductID] nvarchar(4000),\n\t[SpecialOfferID] nvarchar(4000),\n\t[UnitPrice] nvarchar(4000),\n\t[UnitPriceDiscount] nvarchar(4000),\n\t[LineTotal] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'confirm_Sales_Order_Detail.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nCREATE EXTERNAL TABLE Staging.SalesOrder (\n\t[SalesOrderID] nvarchar(4000),\n\t[RevisionNumber] nvarchar(4000),\n\t[OrderDate] nvarchar(4000),\n\t[DueDate] nvarchar(4000),\n\t[ShipDate] nvarchar(4000),\n\t[Status] nvarchar(4000),\n\t[OnlineOrderFlag] nvarchar(4000),\n\t[SalesOrderNumber] nvarchar(4000),\n\t[PurchaseOrderNumber] nvarchar(4000),\n\t[AccountNumber] nvarchar(4000),\n\t[CustomerID] nvarchar(4000),\n\t[SalesPersonID] nvarchar(4000),\n\t[TerritoryID] nvarchar(4000),\n\t[BillToAddressID] nvarchar(4000),\n\t[ShipToAddressID] nvarchar(4000),\n\t[ShipMethodID] nvarchar(4000),\n\t[CreditCardID] nvarchar(4000),\n\t[CreditCardApprovalCode] nvarchar(4000),\n\t[CurrencyRateID] nvarchar(4000),\n\t[SubTotal] nvarchar(4000),\n\t[TaxAmt] nvarchar(4000),\n\t[Freight] nvarchar(4000),\n\t[TotalDue] nvarchar(4000),\n\t[Comment] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'confirm_Sales_Order.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nCREATE EXTERNAL TABLE Staging.Product (\n\t[ProductID] nvarchar(4000),\n\t[Name] nvarchar(4000),\n\t[ProductNumber] nvarchar(4000),\n\t[MakeFlag] nvarchar(4000),\n\t[FinishedGoodsFlag] nvarchar(4000),\n\t[Color] nvarchar(4000),\n\t[SafetyStockLevel] nvarchar(4000),\n\t[ReorderPoint] nvarchar(4000),\n\t[StandardCost] nvarchar(4000),\n\t[ListPrice] nvarchar(4000),\n\t[Size] nvarchar(4000),\n\t[SizeUnitMeasureCode] nvarchar(4000),\n\t[WeightUnitMeasureCode] nvarchar(4000),\n\t[Weight] nvarchar(4000),\n\t[DaysToManufacture] nvarchar(4000),\n\t[ProductLine] nvarchar(4000),\n\t[Class] nvarchar(4000),\n\t[Style] nvarchar(4000),\n\t[ProductSubcategoryID] nvarchar(4000),\n\t[ProductModelID] nvarchar(4000),\n\t[SellStartDate] nvarchar(4000),\n\t[SellEndDate] nvarchar(4000),\n\t[DiscontinuedDate] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'confirm_PRODUCT_INFO.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nCREATE EXTERNAL TABLE Staging.Product_Category (\n\t[ProductSubcategoryID] nvarchar(4000),\n\t[ProductCategoryID] nvarchar(4000),\n\t[Name] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'confirm_Product_Category.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE Staging.Customer (\n\t[BusinessEntityID] nvarchar(4000),\n\t[Title] nvarchar(4000),\n\t[FirstName] nvarchar(4000),\n\t[MiddleName] nvarchar(4000),\n\t[LastName] nvarchar(4000),\n\t[Suffix] nvarchar(4000),\n\t[PhoneNumber] nvarchar(4000),\n\t[PhoneNumberType] nvarchar(4000),\n\t[EmailAddress] nvarchar(4000),\n\t[EmailPromotion] nvarchar(4000),\n\t[AddressType] nvarchar(4000),\n\t[AddressLine1] nvarchar(4000),\n\t[AddressLine2] nvarchar(4000),\n\t[City] nvarchar(4000),\n\t[StateProvinceName] nvarchar(4000),\n\t[PostalCode] nvarchar(4000),\n\t[CountryRegionName] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'confirm_CUSTOMER_INFO.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nCREATE EXTERNAL TABLE staging.DimDate (\n    DateKey INT,\n    FullDate DATE,\n    Day INT,\n    DayOfWeek INT,\n    DayOfWeekName VARCHAR(20),\n    DayOfYear INT,\n    WeekOfYear INT,\n    Month INT,\n    MonthName VARCHAR(20),\n    Quarter INT,\n    Year INT,\n    IsWeekend BIT,\n    IsHoliday BIT -- Optionally, you can also add a flag for holidays\n\t)\n\tWITH (\n\tLOCATION = 'confirm_DateDim.parquet',\n\tDATA_SOURCE = [confirm_azdevsynapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDelimitedTextFormat]\n\t)\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Vsqldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/build_star_schema_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW dbo.DimCustomer AS \nSELECT [BusinessEntityID] AS CustomerID,\n\t[Title] ,\n\t[FirstName] ,\n\t[MiddleName] ,\n\t[LastName] ,\n\t[Suffix] ,\n\t[PhoneNumber] ,\n\t[PhoneNumberType] ,\n\t[EmailAddress] ,\n\t[EmailPromotion] ,\n\t[AddressType] ,\n\t[AddressLine1] ,\n\t[AddressLine2] ,\n\t[City] ,\n\t[StateProvinceName] ,\n\t[PostalCode] ,\n\t[CountryRegionName] \n  FROM STAGING.CUSTOMER\nGO\n\nCREATE VIEW dbo.DimProduct AS\nSELECT P.*, PC.NAME AS PRODUCT_CATEGORY\n  FROM STAGING.PRODUCT P\n  JOIN STAGING.PRODUCT_CATEGORY PC\n    ON P.ProductSubcategoryID = PC.ProductSubcategoryID\n\n\nCREATE VIEW dbo.DimSalesPerson AS\nSELECT *\n  FROM STAGING.SalesPerson\n\nCREATE VIEW dbo.FactSales AS\nSELECT *\n  FROM STAGING.SalesOrder\n\nCREATE VIEW dbo.FactSalesDetail AS\nSELECT sod.SalesOrderDetailId as FactSalesDetailId, so.*, \n       sod.[CarrierTrackingNumber],\n\tsod.[OrderQty],\n\tsod.[ProductID],\n\tsod.[SpecialOfferID],\n\tsod.[UnitPrice],\n\tsod.[UnitPriceDiscount],\n\tsod.[LineTotal]\n  FROM STAGING.SalesOrder so\n  JOIN STAGING.SalesOrderDetail SOd\n    on so.salesorderid = sod.salesorderid\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Vsqldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "37456115-11bc-41dd-9af7-64aaddfe4a70"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpoola",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2415c13b-e112-4409-b7cc-0c6086ba0485"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/014ff8fc-ea99-4a9f-b5ec-a71518e2f48c/resourceGroups/Az_Dev/providers/Microsoft.Synapse/workspaces/azdevsynapse/bigDataPools/sparkpoola",
						"name": "sparkpoola",
						"type": "Spark",
						"endpoint": "https://azdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoola",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"CREATE TABLE IF NOT EXISTS confirm.confirm_Product_Info\n",
							"USING DELTA\n",
							"Location 'abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Product_Info.delta'"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Onetime_load_confirm')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "193de9d7-eb4c-4a37-b09d-c4298fb035a7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import SparkSession \n",
							"from pyspark.sql.types import * \n",
							"\n",
							"\n",
							"confirm_table_name = table_name.replace(\"EXPORT\", \"confirm\")\n",
							"\n",
							"blob_account_name = \"isourcedev11282024\"\n",
							"blob_container_name = \"raw-dev\"\n",
							"\n",
							"sc = SparkSession.builder.getOrCreate()\n",
							"\n",
							"#raw\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"blob_sas_token = token_library.getConnectionString(\"az_isource_blob\")\n",
							"\n",
							"spark.conf.set(\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\n",
							"    blob_sas_token)\n",
							"\n",
							"#confirm\n",
							"account_name = 'azdevsynapse' \n",
							"container_name = 'confirm'  \n",
							"\n",
							"adls_path = 'abfss://%s@%s.dfs.core.windows.net/' % (container_name, account_name) \n",
							"print('Primary storage account path: ' + adls_path) \n",
							"\n",
							"wasb_path = 'wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/%s' % (table_name)\n",
							"\n",
							"    \n",
							"data = spark.read.load(wasb_path, format='parquet') \n",
							"\n",
							"\n",
							"parquet_path = adls_path + confirm_table_name\n",
							"data.write.parquet(parquet_path, mode = 'overwrite') \n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Raw_to_confirm_scd_type2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9315dee3-fd60-4b4b-b59d-83a9ddbe5d27"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import col, lit, current_timestamp, when\r\n",
							"from pyspark.sql.window import Window\r\n",
							"\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Raw_to_confirm_scd_type2\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"source_path = \"wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/EXPORT_Sales_Person.parquet\"\r\n",
							"target_path = \"abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Person.parquet\"\r\n",
							"\r\n",
							"incoming_data = spark.read.parquet(source_path)\r\n",
							"\r\n",
							"\r\n",
							"try:\r\n",
							"    target_data = spark.read.parquet(target_path)\r\n",
							"except Exception as e:\r\n",
							"    print(\"Target table does not exist, creating new table.\")\r\n",
							"    target_data = spark.createDataFrame([], incoming_data.schema.add(\"start_date\", \"timestamp\").add(\"end_date\", \"timestamp\").add(\"is_current\", \"boolean\"))\r\n",
							"\r\n",
							"incoming_data = incoming_data.withColumn(\"start_date\", current_timestamp()) \\\r\n",
							"                             .withColumn(\"end_date\", lit(None).cast(\"timestamp\")) \\\r\n",
							"                             .withColumn(\"is_current\", lit(True))\r\n",
							"\r\n",
							"\r\n",
							"join_condition = (incoming_data[\"BusinessEntityID\"] == target_data[\"BusinessEntityID\"]) & target_data[\"is_current\"]\r\n",
							"\r\n",
							"comparison_df = incoming_data.join(target_data, join_condition, \"left_outer\") \\\r\n",
							"                              .select(\r\n",
							"                                  incoming_data[\"*\"],\r\n",
							"                                  target_data[\"attribute1\"].alias(\"old_attribute1\"),\r\n",
							"                                  target_data[\"attribute2\"].alias(\"old_attribute2\"),\r\n",
							"                                  target_data[\"is_current\"].alias(\"old_is_current\")\r\n",
							"                              )\r\n",
							"\r\n",
							"merged_data = incoming_data.alias(\"src\").join(\r\n",
							"    target_data.alias(\"tgt\"),\r\n",
							"    col(\"src.BusinessEntityID\") == col(\"tgt.BusinessEntityID\"),\r\n",
							"    \"full_outer\"\r\n",
							")\r\n",
							"\r\n",
							"final_data = merged_data.withColumn(\r\n",
							"    \"action\",\r\n",
							"    when(col(\"tgt.BusinessEntityID\").isNull(), lit(\"INSERT\"))  # New record\r\n",
							"    .when(\r\n",
							"        (col(\"src.attribute1\") != col(\"tgt.attribute1\")) |\r\n",
							"        (col(\"src.attribute2\") != col(\"tgt.attribute2\")),\r\n",
							"        lit(\"UPDATE\")  # Changed record\r\n",
							"    ).otherwise(lit(\"NO_ACTION\"))  # No change\r\n",
							")\r\n",
							"\r\n",
							"expired_records = final_data.filter(col(\"action\") == \"UPDATE\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.attribute1\"),\r\n",
							"        col(\"tgt.attribute2\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        current_timestamp().alias(\"end_date\"),\r\n",
							"        lit(False).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"new_records = final_data.filter(col(\"action\").isin(\"INSERT\", \"UPDATE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"src.BusinessEntityID\"),\r\n",
							"        col(\"src.attribute1\"),\r\n",
							"        col(\"src.attribute2\"),\r\n",
							"        current_timestamp().alias(\"start_date\"),\r\n",
							"        lit(None).cast(\"timestamp\").alias(\"end_date\"),\r\n",
							"        lit(True).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"unchanged_records = final_data.filter(col(\"action\") == \"NO_ACTION\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.attribute1\"),\r\n",
							"        col(\"tgt.attribute2\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        col(\"tgt.end_date\"),\r\n",
							"        col(\"tgt.is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"final_dim_table = expired_records.union(new_records).union(unchanged_records)\r\n",
							"\r\n",
							"final_dim_table.write.parquet(target_path, mode=\"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/raw_to_confim_scd2_product_info_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpoola",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "28151633-7132-4b65-ae92-c7cefa147552"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/014ff8fc-ea99-4a9f-b5ec-a71518e2f48c/resourceGroups/Az_Dev/providers/Microsoft.Synapse/workspaces/azdevsynapse/bigDataPools/sparkpoola",
						"name": "sparkpoola",
						"type": "Spark",
						"endpoint": "https://azdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoola",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import col, lit, current_timestamp, when\r\n",
							"from delta.tables import DeltaTable\r\n",
							"\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Raw_to_confirm_scd_type2\") \\\r\n",
							"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
							"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"blob_account_name = \"isourcedev11282024\"\r\n",
							"blob_container_name = \"raw-dev\"\r\n",
							"\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"az_isource_blob\")\r\n",
							"\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)\r\n",
							"\r\n",
							"source_path = \"wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/EXPORT_PRODUCT_INFO.parquet\"\r\n",
							"target_path = \"abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Product_Info.delta\"\r\n",
							"\r\n",
							"incoming_data = spark.read.parquet(source_path)\r\n",
							"\r\n",
							"if DeltaTable.isDeltaTable(spark, target_path):\r\n",
							"    target_table = DeltaTable.forPath(spark, target_path)\r\n",
							"    target_data = target_table.toDF()\r\n",
							"else:\r\n",
							"    print(\"Target Delta table does not exist, creating new table.\")\r\n",
							"    target_data = spark.createDataFrame([], incoming_data.schema.add(\"start_date\", \"timestamp\").add(\"end_date\", \"timestamp\").add(\"is_current\", \"boolean\"))\r\n",
							"\r\n",
							"incoming_data = incoming_data.withColumn(\"start_date\", current_timestamp()) \\\r\n",
							"                             .withColumn(\"end_date\", lit(None).cast(\"timestamp\")) \\\r\n",
							"                             .withColumn(\"is_current\", lit(True))\r\n",
							"\r\n",
							"merged_data = incoming_data.alias(\"src\").join(\r\n",
							"    target_data.alias(\"tgt\"),\r\n",
							"    col(\"src.productID\") == col(\"tgt.productID\"),\r\n",
							"    \"full_outer\"\r\n",
							")\r\n",
							"\r\n",
							"final_data = merged_data.withColumn(\r\n",
							"    \"action\",\r\n",
							"    when(col(\"tgt.productID\").isNull(), lit(\"INSERT\"))  # New record\r\n",
							"    .when(\r\n",
							"        (col(\"src.ListPrice\") != col(\"tgt.ListPrice\")) |\r\n",
							"        (col(\"src.Size\") != col(\"tgt.Size\")),\r\n",
							"        lit(\"UPDATE\")  # Changed record\r\n",
							"    ).otherwise(lit(\"NO_ACTION\"))  # No change\r\n",
							")\r\n",
							"\r\n",
							"expired_records = final_data.filter(col(\"action\") == \"UPDATE\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.productID\"),\r\n",
							"        col(\"tgt.ListPrice\"),\r\n",
							"        col(\"tgt.Size\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        current_timestamp().alias(\"end_date\"),\r\n",
							"        lit(False).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"new_records = final_data.filter(col(\"action\").isin(\"INSERT\", \"UPDATE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"src.productID\"),\r\n",
							"        col(\"src.ListPrice\"),\r\n",
							"        col(\"src.Size\"),\r\n",
							"        current_timestamp().alias(\"start_date\"),\r\n",
							"        lit(None).cast(\"timestamp\").alias(\"end_date\"),\r\n",
							"        lit(True).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"unchanged_records = final_data.filter(col(\"action\") == \"NO_ACTION\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.productID\"),\r\n",
							"        col(\"tgt.ListPrice\"),\r\n",
							"        col(\"tgt.Size\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        col(\"tgt.end_date\"),\r\n",
							"        col(\"tgt.is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"final_dim_table = expired_records.union(new_records).union(unchanged_records)\r\n",
							"\r\n",
							"final_dim_table.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/raw_to_confirm_scd_type2_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpoola",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a72f9068-6f9b-492e-8ce0-6ccbb63f4e4d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/014ff8fc-ea99-4a9f-b5ec-a71518e2f48c/resourceGroups/Az_Dev/providers/Microsoft.Synapse/workspaces/azdevsynapse/bigDataPools/sparkpoola",
						"name": "sparkpoola",
						"type": "Spark",
						"endpoint": "https://azdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoola",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import col, lit, current_timestamp, when\r\n",
							"from delta.tables import DeltaTable\r\n",
							"\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Raw_to_confirm_scd_type2\") \\\r\n",
							"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
							"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"blob_account_name = \"isourcedev11282024\"\r\n",
							"blob_container_name = \"raw-dev\"\r\n",
							"\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"az_isource_blob\")\r\n",
							"\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)\r\n",
							"\r\n",
							"source_path = \"wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/EXPORT_CUSTOMER_INFO.parquet\"\r\n",
							"target_path = \"abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_CUSTOMER_INFO.delta\"\r\n",
							"\r\n",
							"incoming_data = spark.read.parquet(source_path)\r\n",
							"\r\n",
							"if DeltaTable.isDeltaTable(spark, target_path):\r\n",
							"    target_table = DeltaTable.forPath(spark, target_path)\r\n",
							"    target_data = target_table.toDF()\r\n",
							"else:\r\n",
							"    print(\"Target Delta table does not exist, creating new table.\")\r\n",
							"    target_data = spark.createDataFrame([], incoming_data.schema.add(\"start_date\", \"timestamp\").add(\"end_date\", \"timestamp\").add(\"is_current\", \"boolean\"))\r\n",
							"\r\n",
							"incoming_data = incoming_data.withColumn(\"start_date\", current_timestamp()) \\\r\n",
							"                             .withColumn(\"end_date\", lit(None).cast(\"timestamp\")) \\\r\n",
							"                             .withColumn(\"is_current\", lit(True))\r\n",
							"\r\n",
							"merged_data = incoming_data.alias(\"src\").join(\r\n",
							"    target_data.alias(\"tgt\"),\r\n",
							"    col(\"src.BusinessEntityID\") == col(\"tgt.BusinessEntityID\"),\r\n",
							"    \"full_outer\"\r\n",
							")\r\n",
							"\r\n",
							"final_data = merged_data.withColumn(\r\n",
							"    \"action\",\r\n",
							"    when(col(\"tgt.BusinessEntityID\").isNull(), lit(\"INSERT\"))  # New record\r\n",
							"    .when(\r\n",
							"        (col(\"src.PhoneNumber\") != col(\"tgt.PhoneNumber\")) |\r\n",
							"        (col(\"src.EmailAddress\") != col(\"tgt.EmailAddress\")),\r\n",
							"        lit(\"UPDATE\")  # Changed record\r\n",
							"    ).otherwise(lit(\"NO_ACTION\"))  # No change\r\n",
							")\r\n",
							"\r\n",
							"expired_records = final_data.filter(col(\"action\") == \"UPDATE\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.PhoneNumber\"),\r\n",
							"        col(\"tgt.EmailAddress\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        current_timestamp().alias(\"end_date\"),\r\n",
							"        lit(False).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"new_records = final_data.filter(col(\"action\").isin(\"INSERT\", \"UPDATE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"src.BusinessEntityID\"),\r\n",
							"        col(\"src.PhoneNumber\"),\r\n",
							"        col(\"src.EmailAddress\"),\r\n",
							"        current_timestamp().alias(\"start_date\"),\r\n",
							"        lit(None).cast(\"timestamp\").alias(\"end_date\"),\r\n",
							"        lit(True).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"unchanged_records = final_data.filter(col(\"action\") == \"NO_ACTION\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.PhoneNumber\"),\r\n",
							"        col(\"tgt.EmailAddress\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        col(\"tgt.end_date\"),\r\n",
							"        col(\"tgt.is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"final_dim_table = expired_records.union(new_records).union(unchanged_records)\r\n",
							"\r\n",
							"final_dim_table.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE TABLE IF NOT EXISTS confirm.confirm_CUSTOMER_INFO\r\n",
							"USING DELTA\r\n",
							"Location 'abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_CUSTOMER_INFO.delta'"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import col, lit, current_timestamp, when\r\n",
							"from delta.tables import DeltaTable\r\n",
							"\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Raw_to_confirm_scd_type2\") \\\r\n",
							"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
							"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"blob_account_name = \"isourcedev11282024\"\r\n",
							"blob_container_name = \"raw-dev\"\r\n",
							"\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"az_isource_blob\")\r\n",
							"\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)\r\n",
							"\r\n",
							"source_path = \"wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/EXPORT_CUSTOMER_INFO.parquet\"\r\n",
							"target_path = \"abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_CUSTOMER_INFO.delta\"\r\n",
							"\r\n",
							"incoming_data = spark.read.parquet(source_path)\r\n",
							"\r\n",
							"if DeltaTable.isDeltaTable(spark, target_path):\r\n",
							"    target_table = DeltaTable.forPath(spark, target_path)\r\n",
							"    target_data = target_table.toDF()\r\n",
							"else:\r\n",
							"    print(\"Target Delta table does not exist, creating new table.\")\r\n",
							"    target_data = spark.createDataFrame([], incoming_data.schema.add(\"start_date\", \"timestamp\").add(\"end_date\", \"timestamp\").add(\"is_current\", \"boolean\"))\r\n",
							"\r\n",
							"incoming_data = incoming_data.withColumn(\"start_date\", current_timestamp()) \\\r\n",
							"                             .withColumn(\"end_date\", lit(None).cast(\"timestamp\")) \\\r\n",
							"                             .withColumn(\"is_current\", lit(True))\r\n",
							"\r\n",
							"merged_data = incoming_data.alias(\"src\").join(\r\n",
							"    target_data.alias(\"tgt\"),\r\n",
							"    col(\"src.BusinessEntityID\") == col(\"tgt.BusinessEntityID\"),\r\n",
							"    \"full_outer\"\r\n",
							")\r\n",
							"\r\n",
							"final_data = merged_data.withColumn(\r\n",
							"    \"action\",\r\n",
							"    when(col(\"tgt.BusinessEntityID\").isNull(), lit(\"INSERT\"))  # New record\r\n",
							"    .when(\r\n",
							"        (col(\"src.PhoneNumber\") != col(\"tgt.PhoneNumber\")) |\r\n",
							"        (col(\"src.EmailAddress\") != col(\"tgt.EmailAddress\")),\r\n",
							"        lit(\"UPDATE\")  # Changed record\r\n",
							"    ).otherwise(lit(\"NO_ACTION\"))  # No change\r\n",
							")\r\n",
							"\r\n",
							"expired_records = final_data.filter(col(\"action\") == \"UPDATE\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.PhoneNumber\"),\r\n",
							"        col(\"tgt.EmailAddress\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        current_timestamp().alias(\"end_date\"),\r\n",
							"        lit(False).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"new_records = final_data.filter(col(\"action\").isin(\"INSERT\", \"UPDATE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"src.BusinessEntityID\"),\r\n",
							"        col(\"src.PhoneNumber\"),\r\n",
							"        col(\"src.EmailAddress\"),\r\n",
							"        current_timestamp().alias(\"start_date\"),\r\n",
							"        lit(None).cast(\"timestamp\").alias(\"end_date\"),\r\n",
							"        lit(True).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"unchanged_records = final_data.filter(col(\"action\") == \"NO_ACTION\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.PhoneNumber\"),\r\n",
							"        col(\"tgt.EmailAddress\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        col(\"tgt.end_date\"),\r\n",
							"        col(\"tgt.is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"final_dim_table = expired_records.union(new_records).union(unchanged_records)\r\n",
							"\r\n",
							"final_dim_table.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import col, lit, current_timestamp, when\r\n",
							"from delta.tables import DeltaTable\r\n",
							"\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Raw_to_confirm_scd_type2\") \\\r\n",
							"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
							"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"blob_account_name = \"isourcedev11282024\"\r\n",
							"blob_container_name = \"raw-dev\"\r\n",
							"\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"az_isource_blob\")\r\n",
							"\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)\r\n",
							"\r\n",
							"source_path = \"wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/EXPORT_CUSTOMER_INFO.parquet\"\r\n",
							"target_path = \"abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_CUSTOMER_INFO.delta\"\r\n",
							"\r\n",
							"incoming_data = spark.read.parquet(source_path)\r\n",
							"\r\n",
							"if DeltaTable.isDeltaTable(spark, target_path):\r\n",
							"    target_table = DeltaTable.forPath(spark, target_path)\r\n",
							"    target_data = target_table.toDF()\r\n",
							"else:\r\n",
							"    print(\"Target Delta table does not exist, creating new table.\")\r\n",
							"    target_data = spark.createDataFrame([], incoming_data.schema.add(\"start_date\", \"timestamp\").add(\"end_date\", \"timestamp\").add(\"is_current\", \"boolean\"))\r\n",
							"\r\n",
							"incoming_data = incoming_data.withColumn(\"start_date\", current_timestamp()) \\\r\n",
							"                             .withColumn(\"end_date\", lit(None).cast(\"timestamp\")) \\\r\n",
							"                             .withColumn(\"is_current\", lit(True))\r\n",
							"\r\n",
							"merged_data = incoming_data.alias(\"src\").join(\r\n",
							"    target_data.alias(\"tgt\"),\r\n",
							"    col(\"src.BusinessEntityID\") == col(\"tgt.BusinessEntityID\"),\r\n",
							"    \"full_outer\"\r\n",
							")\r\n",
							"\r\n",
							"final_data = merged_data.withColumn(\r\n",
							"    \"action\",\r\n",
							"    when(col(\"tgt.BusinessEntityID\").isNull(), lit(\"INSERT\"))  # New record\r\n",
							"    .when(\r\n",
							"        (col(\"src.PhoneNumber\") != col(\"tgt.PhoneNumber\")) |\r\n",
							"        (col(\"src.EmailAddress\") != col(\"tgt.EmailAddress\")),\r\n",
							"        lit(\"UPDATE\")  # Changed record\r\n",
							"    ).otherwise(lit(\"NO_ACTION\"))  # No change\r\n",
							")\r\n",
							"\r\n",
							"expired_records = final_data.filter(col(\"action\") == \"UPDATE\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.PhoneNumber\"),\r\n",
							"        col(\"tgt.EmailAddress\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        current_timestamp().alias(\"end_date\"),\r\n",
							"        lit(False).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"new_records = final_data.filter(col(\"action\").isin(\"INSERT\", \"UPDATE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"src.BusinessEntityID\"),\r\n",
							"        col(\"src.PhoneNumber\"),\r\n",
							"        col(\"src.EmailAddress\"),\r\n",
							"        current_timestamp().alias(\"start_date\"),\r\n",
							"        lit(None).cast(\"timestamp\").alias(\"end_date\"),\r\n",
							"        lit(True).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"unchanged_records = final_data.filter(col(\"action\") == \"NO_ACTION\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.PhoneNumber\"),\r\n",
							"        col(\"tgt.EmailAddress\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        col(\"tgt.end_date\"),\r\n",
							"        col(\"tgt.is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"final_dim_table = expired_records.union(new_records).union(unchanged_records)\r\n",
							"\r\n",
							"final_dim_table.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from delta.tables import DeltaTable\r\n",
							"\r\n",
							"# Initialize Spark session\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Parquet_to_Delta\") \\\r\n",
							"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
							"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"# Define storage account and container details\r\n",
							"account_name = 'azdevsynapse'\r\n",
							"container_name = 'confirm'\r\n",
							"adls_path = f'abfss://{container_name}@{account_name}.dfs.core.windows.net/'\r\n",
							"confirm_table_name = 'confirm_DateDim.parquet'\r\n",
							"\r\n",
							"# Source and target paths\r\n",
							"source_path = adls_path + confirm_table_name\r\n",
							"target_path = adls_path + 'confirm_DateDim.delta'\r\n",
							"\r\n",
							"print(f'Source path: {source_path}')\r\n",
							"print(f'Target path: {target_path}')\r\n",
							"\r\n",
							"# Read the source Parquet file\r\n",
							"data = spark.read.format(\"parquet\").option(\"header\", \"true\").load(source_path)\r\n",
							"\r\n",
							"# Check if the Delta table exists\r\n",
							"if DeltaTable.isDeltaTable(spark, target_path):\r\n",
							"    print(\"Delta table exists, appending data.\")\r\n",
							"    delta_table = DeltaTable.forPath(spark, target_path)\r\n",
							"    delta_table.alias(\"tgt\").merge(\r\n",
							"        data.alias(\"src\"),\r\n",
							"        \"tgt.DateKey = src.DateKey\"  # Replace 'id' with your unique key column\r\n",
							"    ).whenMatchedUpdateAll() \\\r\n",
							"     .whenNotMatchedInsertAll() \\\r\n",
							"     .execute()\r\n",
							"else:\r\n",
							"    print(\"Delta table does not exist, creating new table.\")\r\n",
							"    data.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/raw_to_confirm_scd_type2_soft_delete_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "262eedd1-da55-404d-9373-2ad0fc54aa3b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import col, lit, current_timestamp, when\r\n",
							"from delta.tables import DeltaTable\r\n",
							"\r\n",
							"spark = SparkSession.builder \\\r\n",
							"    .appName(\"Raw_to_confirm_scd_type2\") \\\r\n",
							"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
							"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
							"    .getOrCreate()\r\n",
							"\r\n",
							"source_path = \"wasbs://raw-dev@isourcedev11282024.blob.core.windows.net/EXPORT_Sales_Person.parquet\"\r\n",
							"target_path = \"abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Person.delta\"\r\n",
							"\r\n",
							"incoming_data = spark.read.parquet(source_path)\r\n",
							"\r\n",
							"if DeltaTable.isDeltaTable(spark, target_path):\r\n",
							"    target_table = DeltaTable.forPath(spark, target_path)\r\n",
							"    target_data = target_table.toDF()\r\n",
							"else:\r\n",
							"    print(\"Target Delta table does not exist, creating new table.\")\r\n",
							"    target_data = spark.createDataFrame([], incoming_data.schema.add(\"start_date\", \"timestamp\").add(\"end_date\", \"timestamp\").add(\"is_current\", \"boolean\"))\r\n",
							"\r\n",
							"incoming_data = incoming_data.withColumn(\"start_date\", current_timestamp()) \\\r\n",
							"                             .withColumn(\"end_date\", lit(None).cast(\"timestamp\")) \\\r\n",
							"                             .withColumn(\"is_current\", lit(True))\r\n",
							"\r\n",
							"merged_data = incoming_data.alias(\"src\").join(\r\n",
							"    target_data.alias(\"tgt\"),\r\n",
							"    col(\"src.BusinessEntityID\") == col(\"tgt.BusinessEntityID\"),\r\n",
							"    \"full_outer\"\r\n",
							")\r\n",
							"\r\n",
							"final_data = merged_data.withColumn(\r\n",
							"    \"action\",\r\n",
							"    when(col(\"tgt.BusinessEntityID\").isNull(), lit(\"INSERT\"))  \r\n",
							"    .when(\r\n",
							"        (col(\"src.attribute1\") != col(\"tgt.attribute1\")) |\r\n",
							"        (col(\"src.attribute2\") != col(\"tgt.attribute2\")),\r\n",
							"        lit(\"UPDATE\")  \r\n",
							"    ).when(\r\n",
							"        col(\"src.BusinessEntityID\").isNull() & col(\"tgt.BusinessEntityID\").isNotNull(),\r\n",
							"        lit(\"SOFT_DELETE\")  \r\n",
							"    ).otherwise(lit(\"NO_ACTION\"))  \r\n",
							")\r\n",
							"\r\n",
							"expired_records = final_data.filter(col(\"action\").isin(\"UPDATE\", \"SOFT_DELETE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.attribute1\"),\r\n",
							"        col(\"tgt.attribute2\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        current_timestamp().alias(\"end_date\"),\r\n",
							"        lit(False).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"new_records = final_data.filter(col(\"action\").isin(\"INSERT\", \"UPDATE\")) \\\r\n",
							"    .select(\r\n",
							"        col(\"src.BusinessEntityID\"),\r\n",
							"        col(\"src.attribute1\"),\r\n",
							"        col(\"src.attribute2\"),\r\n",
							"        current_timestamp().alias(\"start_date\"),\r\n",
							"        lit(None).cast(\"timestamp\").alias(\"end_date\"),\r\n",
							"        lit(True).alias(\"is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"unchanged_records = final_data.filter(col(\"action\") == \"NO_ACTION\") \\\r\n",
							"    .select(\r\n",
							"        col(\"tgt.BusinessEntityID\"),\r\n",
							"        col(\"tgt.attribute1\"),\r\n",
							"        col(\"tgt.attribute2\"),\r\n",
							"        col(\"tgt.start_date\"),\r\n",
							"        col(\"tgt.end_date\"),\r\n",
							"        col(\"tgt.is_current\")\r\n",
							"    )\r\n",
							"\r\n",
							"final_dim_table = expired_records.union(new_records).union(unchanged_records)\r\n",
							"\r\n",
							"\r\n",
							"final_dim_table.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/confirm')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://azsynapse@azdevsynapse.dfs.core.windows.net/confirm",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm_Product_Info",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "confirm"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "productID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ListPrice",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Size",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "start_date",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "end_date",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "is_current",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Product_Info.delta",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Product_Info.delta",
									"Properties": {
										"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm_Sales_Person",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "confirm"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "BusinessEntityID",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "PhoneNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "EmailAddress",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "start_date",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "end_date",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "is_current",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Person.delta",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Person.delta",
									"Properties": {
										"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "BusinessEntityID",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm_DimDate",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "confirm"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "DateKey",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "FullDate",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Day",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DayOfWeek",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DayOfWeekName",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DayOfYear",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "WeekOfYear",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Month",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "MonthName",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Quarter",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Year",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "IsWeekend",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "IsHoliday",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_DateDim.delta",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_DateDim.delta",
									"Properties": {
										"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "DateKey",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"Partitioning": {}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm_customer_info",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "confirm"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "BusinessEntityID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "PhoneNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "EmailAddress",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "start_date",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "end_date",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "is_current",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_CUSTOMER_INFO.delta",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_CUSTOMER_INFO.delta",
									"Properties": {
										"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm_Sales_Order",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "confirm"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "SalesOrderID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "RevisionNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "OrderDate",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DueDate",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ShipDate",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Status",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "OnlineOrderFlag",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SalesOrderNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "PurchaseOrderNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "AccountNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CustomerID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SalesPersonID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "TerritoryID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "BillToAddressID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ShipToAddressID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ShipMethodID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CreditCardID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CreditCardApprovalCode",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CurrencyRateID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SubTotal",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "TaxAmt",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Freight",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "TotalDue",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Comment",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "rowguid",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ModifiedDate",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Order.delta",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Order.delta",
									"Properties": {
										"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "confirm_Sales_Order_Detail",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "confirm"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "SalesOrderID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SalesOrderDetailID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CarrierTrackingNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "OrderQty",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ProductID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SpecialOfferID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "UnitPrice",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "UnitPriceDiscount",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "LineTotal",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "rowguid",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ModifiedDate",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Order_Detail.delta",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://confirm@azdevsynapse.dfs.core.windows.net/confirm_Sales_Order_Detail.delta",
									"Properties": {
										"LinkedServiceName": "azdevsynapse-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpoola')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		}
	]
}